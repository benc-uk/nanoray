// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: nanoray.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	NewJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*Void, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/Worker/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) NewJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/Worker/NewJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	Ping(context.Context, *Void) (*Void, error)
	NewJob(context.Context, *JobRequest) (*Void, error)
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) Ping(context.Context, *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedWorkerServer) NewJob(context.Context, *JobRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewJob not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Ping(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_NewJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).NewJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/NewJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).NewJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Worker_Ping_Handler,
		},
		{
			MethodName: "NewJob",
			Handler:    _Worker_NewJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nanoray.proto",
}

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerClient interface {
	GetScene(ctx context.Context, in *SceneRequest, opts ...grpc.CallOption) (*SceneResult, error)
	RegisterWorker(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*Void, error)
	JobComplete(ctx context.Context, in *JobResult, opts ...grpc.CallOption) (*Void, error)
	// Used by frontend
	GetWorkers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*WorkerList, error)
	StartRender(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	GetProgress(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Progress, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) GetScene(ctx context.Context, in *SceneRequest, opts ...grpc.CallOption) (*SceneResult, error) {
	out := new(SceneResult)
	err := c.cc.Invoke(ctx, "/Controller/GetScene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) RegisterWorker(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/Controller/RegisterWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) JobComplete(ctx context.Context, in *JobResult, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/Controller/JobComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetWorkers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*WorkerList, error) {
	out := new(WorkerList)
	err := c.cc.Invoke(ctx, "/Controller/GetWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) StartRender(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/Controller/StartRender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetProgress(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Progress, error) {
	out := new(Progress)
	err := c.cc.Invoke(ctx, "/Controller/GetProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility
type ControllerServer interface {
	GetScene(context.Context, *SceneRequest) (*SceneResult, error)
	RegisterWorker(context.Context, *WorkerInfo) (*Void, error)
	JobComplete(context.Context, *JobResult) (*Void, error)
	// Used by frontend
	GetWorkers(context.Context, *Void) (*WorkerList, error)
	StartRender(context.Context, *Void) (*Void, error)
	GetProgress(context.Context, *Void) (*Progress, error)
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (UnimplementedControllerServer) GetScene(context.Context, *SceneRequest) (*SceneResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScene not implemented")
}
func (UnimplementedControllerServer) RegisterWorker(context.Context, *WorkerInfo) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedControllerServer) JobComplete(context.Context, *JobResult) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobComplete not implemented")
}
func (UnimplementedControllerServer) GetWorkers(context.Context, *Void) (*WorkerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkers not implemented")
}
func (UnimplementedControllerServer) StartRender(context.Context, *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRender not implemented")
}
func (UnimplementedControllerServer) GetProgress(context.Context, *Void) (*Progress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgress not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_GetScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/GetScene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetScene(ctx, req.(*SceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/RegisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).RegisterWorker(ctx, req.(*WorkerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_JobComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).JobComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/JobComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).JobComplete(ctx, req.(*JobResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/GetWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetWorkers(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_StartRender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).StartRender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/StartRender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).StartRender(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/GetProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetProgress(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScene",
			Handler:    _Controller_GetScene_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _Controller_RegisterWorker_Handler,
		},
		{
			MethodName: "JobComplete",
			Handler:    _Controller_JobComplete_Handler,
		},
		{
			MethodName: "GetWorkers",
			Handler:    _Controller_GetWorkers_Handler,
		},
		{
			MethodName: "StartRender",
			Handler:    _Controller_StartRender_Handler,
		},
		{
			MethodName: "GetProgress",
			Handler:    _Controller_GetProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nanoray.proto",
}
